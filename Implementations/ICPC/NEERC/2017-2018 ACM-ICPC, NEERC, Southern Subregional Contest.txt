E. Packman:
Problem:
- Given an char array a[1...N] consists of 'P' as Packman, '.' as empty cell, '*' as asterisks.
- A Packman can move to neighbor cell in 1 time unit.
- Find the minimum time for Packmans to eat all the asterisks.

Idea:
- More time, more can eat -> Linear -> Binary Search the minimum time.
- We go from left to right, when encounters a Packman we know the farest asterisk from the left that the packman has to eat.
- And because we binary search, we know how far the packman can go to the right after finished all the asterisks on the left.

--------------------------------------------------------------------------------------------------------------------------------

F. Berland Elections:

Problem:
- The candidates are ordered by the number of votes, break tie by ordering the person with earliest last vote first
- Possible to have less than K candidates since person with no vote is not considered
- M citizens, each vote for exactly one candidate (among N candidates)
- A citizens have voted and votes are public
- Determine for each of n candidates 3 possible outcomes:
	+ 1 = M - A more votes will not affect this person -> always be selected
	+ 2 = M - A more votes will help this person -> Certain combination of votes for selection
	+ 3 = M - A more votes will not affect this person -> can never be selected
- N: candidates, K: seats, M: number of citizens, A: number of citizens voted

Idea:
Voi dieu kien 1:
-> Xem ban dau thang nay dung thu bao nhieu 
-> Neu co 1 cach lam cho cac thg dang sau lon hon no thi dieu nay false
-> dieu nay true
Vi du khi sort lai: 
a1, a2, a3, a4, .... , aN
gia su thang nay dang o vi tri j (1 <= j <= K)
=> tim cach de tang [j + 1, j + K - j + 1] sao cho min a[j + 1 -> K + 1] > a[j]
-> cai nay tinh dc


Voi dieu kien 2:
-> Ban dau thi thang nay chua o trong parliament
Nhung dieu nhay xay ra:
-> Most optimal cua 1 thang la tat ca thg con lai vote cho no
-> Minh chi can check xem no dung thu bao nhieu khi sort lai
-> Dem xem co bao nhieu thg >= current_vote[x] + M - A

Voi dieu kien 3:
-> Khong thoa man dieu kien 2

--------------------------------------------------------------------------------------------------------------------------------

K. Travel cards

Problem:
- Go between A and B (A->B or B->A) costs:
	+ a
	+ b if (current boarding stop = previous left stop), e.g. from A->B->C cost = a + b
- Can buy <= K travel cards for a route between A to B, cost f each.
	-> Pay once and travel many times without additional cost
- Given a trip plan, find minimum cost have to pay
- N: number of trips, A: cost of single trip, B: cost of trip after transshipment, K: maximum number of travel cards can be,
F: cost of single travel card.

Idea:
- count number of time passing through a routes
- calculate total cost used to pass a route -> check if it's better to use a travel card
-> prioritize by the different between tot - f

--------------------------------------------------------------------------------------------------------------------------------

D. Dog Show

Problem:
- An array of t[1 .. N], t[i] indicates that t[i] unit of time has to be passed before dog can eat bowl i
- Dog only move to the right and takes 1 second to move from x to x + 1
- Dog only has T seconds to eat as many bowl as possible.
- Find the maximum number of bowl it can eat.

Idea:
- If we don't delay and just run, eat bowls that are available -> how many we can eat
-> If we delay at a bowl -> to make sure other bowls can be eaten
-> Let the time to eat the last bowl be TimeLast, time need to wait to eat bowl i is Wait
-> TimeLast + Wait < T
-> We need to calculate if we delay to eat one bowl, how many bowls will be available laters,
and how many bowls we can't it after we delay
-> If we decide to delay at some points, we can delay at the first point without changing the answer
-> We can check the delay time at each bowl
-> Gia su neu dang o bowl i, tinh voi moi bowl j (i <= j <= N) khoang tgian se phai cho, tinh ca tgain di chuyen
de co the an duoc bowl j
-> a1, a2, ... a(N - j + 1)
-> Tinh tgian dua vao cai nay


N = 3, T = 5
t = [1, 5, 3]


