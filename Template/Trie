struct Trie {
    struct Node {
        Node* child[26];
        int exist, cnt;

        Node () {
            for (int i = 0; i < 26; i ++) child[i] = NULL;
            exist = cnt = 0;
        }
    };

    int cur;
    Node* root;
    Trie() : cur(0) {
        root = new Node();
    };

    void Add(string S) {
        Node* p = root;
        for (auto f : S) {
            int c = f - 'a';
            if (p->child[c] == NULL) p->child[c] = new Node();
            p = p->child[c];
            p->cnt ++;
        }
        p->exist ++;
    }
    bool DeleteR(Node* p, string S, int pos) {
        if (pos != (int)S.size()) {
            int c = S[pos] - 'a';
            bool isDeleted = DeleteR(p->child[c], S, pos + 1);
            if (isDeleted) p->child[c] = NULL;
        } else {
            p->exist --;
        }

        if (p != root) {
            p->cnt --;
            if (p->cnt == 0) {
                delete(p);
                return true;
            }
        }
        return false;
    }
    void Delete(string S) {
        if (!find(S)) return;
        DeleteR(root, S, 0);
    }

    bool find(string S) {
        Node* p = root;
        for (auto f : S) {
            int c = f - 'a';
            if (p->child[c] == NULL) return false;
            p = p->child[c];
        }
        return true;
    }

    void Solve(string S) {
        
    }
};
